// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  MENTOR
  STUDENT
  ADMIN
}

enum HelpPostStatus {
  OPEN
  CLOSED
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String  @unique
  username  String  @unique
  firstName String
  lastName  String
  email     String  @unique
  photo     String?

  onboard Boolean @default(false)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  role Role @default(STUDENT)

  student   Student[]
  comments  Comment[]
  likes     Like[]
  companies Company[]
  job       Job[]
  reviews   Review[]

  conversationId String[]       @db.ObjectId
  conversation   Conversation[] @relation(fields: [conversationId], references: [id])

  seenId String[]  @db.ObjectId
  seen   Message[] @relation("Seen", fields: [seenId], references: [id])

  followedByIds String[] @db.ObjectId
  followedBy    User[]   @relation("UserFollows", fields: [followedByIds], references: [id])

  followingIds String[] @db.ObjectId
  following    User[]   @relation("UserFollows", fields: [followingIds], references: [id])

  message Message[]
}

model Student {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName String?
  lastName  String?
  email     String  @unique
  photo     String?

  institution String?
  major       String
  career      String
  time        String
  s_time      String?
  c_technical String
  s_technical String?

  userEmail String
  users     User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  helps        HelpPost[]
  reviews      Review[]
  applications Application[]
}

model HelpPost {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  helpType      String
  title         String
  description   String
  sessionLength String
  budget        String

  status HelpPostStatus @default(OPEN)

  studentId String  @db.ObjectId
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())

  comments Comment[]
  likes    Like[]
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content String

  children      Comment[] @relation("children_comment")
  parentComment Comment?  @relation("children_comment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // parentComment Comment?  @relation("children_comment", fields: [parentId], references: [id])
  parentId      String?   @db.ObjectId

  createAt DateTime @default(now())
  updateAt DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String   @db.ObjectId
  post   HelpPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String   @db.ObjectId
  post   HelpPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Company {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name  String @unique
  email String @unique

  company_logo String?
  about        String
  location     String

  company_url String

  userId String
  user   User   @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  jobs Job[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum JobType {
  FULL_TIME
  PART_TIME
  REMOTE
  CONTRACT
}

model Job {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title       String
  type        JobType @default(FULL_TIME)
  location    String?
  salary      String
  vacancies   Int
  experience  String
  description String
  position    String

  userId String
  user   User   @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  companyId String?  @db.ObjectId
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  applications Application[]
}

model Review {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  rating  Int
  content String

  mentorId String
  mentor   User   @relation(fields: [mentorId], references: [clerkId], onDelete: Cascade)

  studentId String  @db.ObjectId
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Application {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  cv    String
  cover String

  studentEmail String?
  students     Student? @relation(fields: [studentEmail], references: [email], onDelete: Cascade)

  jobId String @db.ObjectId
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  description String?

  messageIds String[]  @db.ObjectId
  message    Message[]

  ownerId String @db.ObjectId

  userId String[] @db.ObjectId
  users  User[]   @relation(fields: [userId], references: [id])

  lastMessageAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  body  String?
  image String?

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

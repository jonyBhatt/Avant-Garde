// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  MENTOR
  STUDENT
  ADMIN
}

enum HelpPostStatus {
  OPEN
  CLOSED
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String  @unique
  username  String  @unique
  firstName String
  lastName  String
  email     String  @unique
  photo     String?

  onboard Boolean @default(false)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  role Role @default(STUDENT)

  student   Student[]
  comments  Comment[]
  likes     Like[]
  companies Company[]
  job       Job[]
}

model Student {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName String?
  lastName  String?
  email     String  @unique
  photo     String?

  institution String?
  major       String
  career      String
  time        String
  s_time      String?
  c_technical String
  s_technical String?

  userEmail String
  users     User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  helps HelpPost[]
  job   Job[]
}

model HelpPost {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  helpType      String
  title         String
  description   String
  sessionLength String
  budget        String

  status HelpPostStatus @default(OPEN)

  studentId String  @db.ObjectId
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())

  comments Comment[]
  likes    Like[]
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content String

  children      Comment[] @relation("children_comment")
  parentComment Comment?  @relation("children_comment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // parentComment Comment?  @relation("children_comment", fields: [parentId], references: [id])
  parentId      String?   @db.ObjectId

  createAt DateTime @default(now())
  updateAt DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String   @db.ObjectId
  post   HelpPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String   @db.ObjectId
  post   HelpPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Company {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name  String @unique
  email String @unique

  company_logo String?
  about        String
  location     String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum JobType {
  FULL_TIME
  PART_TIME
  REMOTE
  CONTRACT
}

model Job {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title       String
  type        JobType @default(FULL_TIME)
  location    String?
  salary      String
  vaccancies  Int
  exprience   String
  description String

  applicationEmail String?
  applications     Student? @relation(fields: [applicationEmail], references: [email], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}
